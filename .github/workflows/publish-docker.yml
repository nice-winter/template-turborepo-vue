name: Build and Push Docker Images on Tag

on:
  push:
    tags:
      - 'v*' # 只监听以 v 开头的 tag（例如 v1.0.0）
  workflow_dispatch: # 允许手动触发
    inputs:
      custom_tag:
        description: '模拟 Git Tag（例如 v1.0.0）'
        required: true
        default: 'v1.0.0'

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # 镜像名称默认使用仓库路径（如 owner/repo）

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # 允许推送镜像到 GHCR

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Dockerized Services
        id: extract-services
        run: |
          # 提取 docker-compose.yml 中所有服务的镜像名称（需提前安装 yq）
          SERVICES=$(docker compose config --services)
          echo "services=$(echo $SERVICES | tr '\n' ' ')" >> $GITHUB_OUTPUT
        env:
          COMPOSE_FILE: docker-compose.yml

      - name: Get Version Tag
        id: tag
        run: |
          RAW_TAG=${{ github.ref_name }}
          CLEAN_TAG=${RAW_TAG#v}
          echo "tag=$CLEAN_TAG" >> $GITHUB_OUTPUT
          echo "TAG=$CLEAN_TAG" >> $GITHUB_ENV
          echo "Using tag: $CLEAN_TAG"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # 自动使用 GitHub Token

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Images
        run: |

          docker compose build
          docker image ls

      - name: Push Images
        run: |

          # 为每个服务构建镜像并推送到 GHCR
          for SERVICE in ${{ steps.extract-services.outputs.services }}; do
            LOCAL_IMAGE_NAME=${{ github.repository.name }}/$SERVICE

            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$SERVICE:${{ steps.tag.outputs.tag }}"
            
            docker tag $LOCAL_IMAGE_NAME $IMAGE_TAG
            # docker push $IMAGE_TAG
            echo "Service: $LOCAL_IMAGE_NAME"
            echo "Pushed: $IMAGE_TAG"
          done

          docker image ls
